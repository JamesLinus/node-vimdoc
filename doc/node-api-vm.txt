*node-api-vm.txt*      For Node.js module `Executing JavaScript` version v3.3.0.

Node.js Documentation
https://nodejs.org

==============================================================================
CONTENTS                                                *node-api-vm-contents*

  1. Intro                                                       |node-api-vm|
  2. Methods                                             |node-api-vm-methods|
    2.1. vm.runInThisContext(code[, options])  |node-api-vm.runInThisContext()|
    2.2. vm.createContext([sandbox])             |node-api-vm.createContext()|
    2.3. vm.isContext(sandbox)                       |node-api-vm.isContext()|
    2.4. vm.runInContext(code, contextifiedSandbox[, options])  |node-api-vm.runInContext()|
    2.5. vm.runInNewContext(code[, sandbox][, options])  |node-api-vm.runInNewContext()|
    2.6. vm.runInDebugContext(code)          |node-api-vm.runInDebugContext()|
  3. Properties                                       |node-api-vm-properties|

==============================================================================
INTRO                                                            *node-api-vm*

Stability: 2 - Stable

You can access this module with:

 >
  var vm = require('vm');
<

JavaScript code can be compiled and run immediately or compiled, saved, and run
later.

==============================================================================
METHODS                                                  *node-api-vm-methods*

------------------------------------------------------------------------------
vm.runInThisContext(code[, options])          *node-api-vm.runInThisContext()*

`vm.runInThisContext()` compiles `code`, runs it and returns the result. Running
code does not have access to local scope, but does have access to the current
`global` object.

Example of using `vm.runInThisContext` and `eval` to run the same code:

 >
  var vm = require('vm');
  var localVar = 'initial value';
  
  var vmResult = vm.runInThisContext('localVar = "vm";');
  console.log('vmResult: ', vmResult);
  console.log('localVar: ', localVar);
  
  var evalResult = eval('localVar = "eval";');
  console.log('evalResult: ', evalResult);
  console.log('localVar: ', localVar);
  
  // vmResult: 'vm', localVar: 'initial value'
  // evalResult: 'eval', localVar: 'eval'
<

`vm.runInThisContext` does not have access to the local scope, so `localVar` is
unchanged. `eval` does have access to the local scope, so `localVar` is changed.

In this way `vm.runInThisContext` is much like an [indirect `eval` call][1],
e.g. `(0,eval)('code')`. However, it also has the following additional options:

* `filename`: allows you to control the filename that shows up in any stack
  traces produced.
* `displayErrors`: whether or not to print any errors to stderr, with the
  line of code that caused them highlighted, before throwing an exception.
  Will capture both syntax errors from compiling `code` and runtime errors
  thrown by executing the compiled code. Defaults to `true`.
* `timeout`: a number of milliseconds to execute `code` before terminating
  execution. If execution is terminated, an `Error` will be thrown.

    
------------------------------------------------------------------------------
vm.createContext([sandbox])                      *node-api-vm.createContext()*

If given a `sandbox` object, will "contextify" that sandbox so that it can be
used in calls to `vm.runInContext` or `script.runInContext`. Inside scripts run
as such, `sandbox` will be the global object, retaining all its existing
properties but also having the built-in objects and functions any standard
[global object][2] has. Outside of scripts run by the vm module, `sandbox` will
be unchanged.

If not given a sandbox object, returns a new, empty contextified sandbox object
you can use.

This function is useful for creating a sandbox that can be used to run multiple
scripts, e.g. if you were emulating a web browser it could be used to create a
single sandbox representing a window's global object, then run all `&lt;script&gt;`
tags together inside that sandbox.

    
------------------------------------------------------------------------------
vm.isContext(sandbox)                                *node-api-vm.isContext()*

Returns whether or not a sandbox object has been contextified by calling
`vm.createContext` on it.

    
------------------------------------------------------------------------------
vm.runInContext(code, contextifiedSandbox[, options])  *node-api-vm.runInContext()*

`vm.runInContext` compiles `code`, then runs it in `contextifiedSandbox` and
returns the result. Running code does not have access to local scope. The
`contextifiedSandbox` object must have been previously contextified via
`vm.createContext`; it will be used as the global object for `code`.

`vm.runInContext` takes the same options as `vm.runInThisContext`.

Example: compile and execute different scripts in a single existing context.

 >
  var util = require('util');
  var vm = require('vm');
  
  var sandbox = { globalVar: 1 };
  vm.createContext(sandbox);
  
  for (var i = 0; i &lt; 10; ++i) {
      vm.runInContext('globalVar *= 2;', sandbox);
  }
  console.log(util.inspect(sandbox));
  
  // { globalVar: 1024 }
<

Note that running untrusted code is a tricky business requiring great care.
`vm.runInContext` is quite useful, but safely running untrusted code requires a
separate process.

    
------------------------------------------------------------------------------
vm.runInNewContext(code[, sandbox][, options])  *node-api-vm.runInNewContext()*

`vm.runInNewContext` compiles `code`, contextifies `sandbox` if passed or
creates a new contextified sandbox if it's omitted, and then runs the code with
the sandbox as the global object and returns the result.

`vm.runInNewContext` takes the same options as `vm.runInThisContext`.

Example: compile and execute code that increments a global variable and sets a
new one. These globals are contained in the sandbox.

 >
  var util = require('util');
  var vm = require('vm');
  
  var sandbox = {
    animal: 'cat',
    count: 2
  };
  
  vm.runInNewContext('count += 1; name = "kitty"', sandbox);
  console.log(util.inspect(sandbox));
  
  // { animal: 'cat', count: 3, name: 'kitty' }
<

Note that running untrusted code is a tricky business requiring great care.
`vm.runInNewContext` is quite useful, but safely running untrusted code requires
a separate process.

    
------------------------------------------------------------------------------
vm.runInDebugContext(code)                   *node-api-vm.runInDebugContext()*

`vm.runInDebugContext` compiles and executes `code` inside the V8 debug context.
The primary use case is to get access to the V8 debug object:

 >
  var Debug = vm.runInDebugContext('Debug');
  Debug.scripts().forEach(function(script) { console.log(script.name); });
<

Note that the debug context and object are intrinsically tied to V8's debugger
implementation and may change (or even get removed) without prior warning.

The debug object can also be exposed with the `--expose_debug_as=` switch.

    

==============================================================================
PROPERTIES                                            *node-api-vm-properties*

 vim:tw=78:ts=8:ft=help