*node-api-util.txt*      For Node.js module `util` version v3.3.0.

Node.js Documentation
https://nodejs.org

==============================================================================
CONTENTS                                              *node-api-util-contents*

  1. Intro                                                     |node-api-util|
  2. Methods                                           |node-api-util-methods|
    2.1. util.debuglog(section)                     |node-api-util.debuglog()|
    2.2. util.format(format[, ...])                   |node-api-util.format()|
    2.3. util.log(string)                                |node-api-util.log()|
    2.4. util.inspect(object[, options])             |node-api-util.inspect()|
    2.5. util.isArray(object)                        |node-api-util.isArray()|
    2.6. util.isRegExp(object)                      |node-api-util.isRegExp()|
    2.7. util.isDate(object)                          |node-api-util.isDate()|
    2.8. util.isError(object)                        |node-api-util.isError()|
    2.9. util.isBoolean(object)                    |node-api-util.isBoolean()|
    2.10. util.isNull(object)                         |node-api-util.isNull()|
    2.11. util.isNullOrUndefined(object)   |node-api-util.isNullOrUndefined()|
    2.12. util.isNumber(object)                     |node-api-util.isNumber()|
    2.13. util.isString(object)                     |node-api-util.isString()|
    2.14. util.isSymbol(object)                     |node-api-util.isSymbol()|
    2.15. util.isUndefined(object)               |node-api-util.isUndefined()|
    2.16. util.isObject(object)                     |node-api-util.isObject()|
    2.17. util.isFunction(object)                 |node-api-util.isFunction()|
    2.18. util.isPrimitive(object)               |node-api-util.isPrimitive()|
    2.19. util.isBuffer(object)                     |node-api-util.isBuffer()|
    2.20. util.inherits(constructor, superConstructor)  |node-api-util.inherits()|
    2.21. util.deprecate(function, string)         |node-api-util.deprecate()|
    2.22. util.debug(string)                           |node-api-util.debug()|
    2.23. util.error([...])                            |node-api-util.error()|
    2.24. util.puts([...])                              |node-api-util.puts()|
    2.25. util.print([...])                            |node-api-util.print()|
    2.26. util.pump(readableStream, writableStream[, callback])  |node-api-util.pump()|
  3. Properties                                     |node-api-util-properties|

==============================================================================
INTRO                                                          *node-api-util*

Stability: 2 - Stable

These functions are in the module `'util'`. Use `require('util')` to
access them.

The `util` module is primarily designed to support the needs of io.js's
internal APIs.  Many of these utilities are useful for your own
programs.  If you find that these functions are lacking for your
purposes, however, you are encouraged to write your own utilities.  We
are not interested in any future additions to the `util` module that
are unnecessary for io.js's internal functionality.

==============================================================================
METHODS                                                *node-api-util-methods*

------------------------------------------------------------------------------
util.debuglog(section)                              *node-api-util.debuglog()*

This is used to create a function which conditionally writes to stderr
based on the existence of a `NODE_DEBUG` environment variable.  If the
`section` name appears in that environment variable, then the returned
function will be similar to `console.error()`.  If not, then the
returned function is a no-op.

For example:

<pre><code class="javascript">var debuglog = util.debuglog('foo');

var bar = 123;
debuglog('hello from foo [%d]', bar);`</pre>
If this program is run with `NODE_DEBUG=foo` in the environment, then
it will output something like:

 >
  FOO 3245: hello from foo [123]
<

where `3245` is the process id.  If it is not run with that
environment variable set, then it will not print anything.

You may separate multiple `NODE_DEBUG` environment variables with a
comma.  For example, `NODE_DEBUG=fs,net,tls`.

    
------------------------------------------------------------------------------
util.format(format[, ...])                            *node-api-util.format()*

Returns a formatted string using the first argument as a `printf`-like format.

The first argument is a string that contains zero or more __placeholders__.
Each placeholder is replaced with the converted value from its corresponding
argument. Supported placeholders are:

* `%s` - String.
* `%d` - Number (both integer and float).
* `%j` - JSON.  Replaced with the string `'[Circular]'` if the argument
  contains circular references.
* `%%` - single percent sign (`'%'`). This does not consume an argument.

If the placeholder does not have a corresponding argument, the placeholder is
not replaced.

 >
  util.format('%s:%s', 'foo'); // 'foo:%s'
<

If there are more arguments than placeholders, the extra arguments are
coerced to strings (for objects and symbols, `util.inspect()` is used)
and then concatenated, delimited by a space.

 >
  util.format('%s:%s', 'foo', 'bar', 'baz'); // 'foo:bar baz'
<

If the first argument is not a format string then `util.format()` returns
a string that is the concatenation of all its arguments separated by spaces.
Each argument is converted to a string with `util.inspect()`.

 >
  util.format(1, 2, 3); // '1 2 3'
<

    
------------------------------------------------------------------------------
util.log(string)                                         *node-api-util.log()*

Output with timestamp on `stdout`.

 >
  require('util').log('Timestamped message.');
<

    
------------------------------------------------------------------------------
util.inspect(object[, options])                      *node-api-util.inspect()*

Return a string representation of `object`, which is useful for debugging.

An optional __options__ object may be passed that alters certain aspects of the
formatted string:

* `showHidden` - if `true` then the object's non-enumerable and symbol
  properties will be shown too. Defaults to `false`.
  
* `depth` - tells `inspect` how many times to recurse while formatting the
  object. This is useful for inspecting large complicated objects. Defaults to
  `2`. To make it recurse indefinitely pass `null`.
  
* `colors` - if `true`, then the output will be styled with ANSI color codes.
  Defaults to `false`. Colors are customizable, see below.
  
* `customInspect` - if `false`, then custom `inspect(depth, opts)` functions
  defined on the objects being inspected won't be called. Defaults to `true`.
  

Example of inspecting all properties of the `util` object:

 >
  var util = require('util');
  
  console.log(util.inspect(util, { showHidden: true, depth: null }));
<

Values may supply their own custom `inspect(depth, opts)` functions, when
called they receive the current depth in the recursive inspection, as well as
the options object passed to `util.inspect()`.

    
------------------------------------------------------------------------------
util.isArray(object)                                 *node-api-util.isArray()*

Internal alias for Array.isArray.

Returns `true` if the given "object" is an `Array`. `false` otherwise.

 >
  var util = require('util');
  
  util.isArray([])
    // true
  util.isArray(new Array)
    // true
  util.isArray({})
    // false
<

    
------------------------------------------------------------------------------
util.isRegExp(object)                               *node-api-util.isRegExp()*

Returns `true` if the given "object" is a `RegExp`. `false` otherwise.

 >
  var util = require('util');
  
  util.isRegExp(/some regexp/)
    // true
  util.isRegExp(new RegExp('another regexp'))
    // true
  util.isRegExp({})
    // false
<

    
------------------------------------------------------------------------------
util.isDate(object)                                   *node-api-util.isDate()*

Returns `true` if the given "object" is a `Date`. `false` otherwise.

 >
  var util = require('util');
  
  util.isDate(new Date())
    // true
  util.isDate(Date())
    // false (without 'new' returns a String)
  util.isDate({})
    // false
<

    
------------------------------------------------------------------------------
util.isError(object)                                 *node-api-util.isError()*

Returns `true` if the given "object" is an `Error`. `false` otherwise.

 >
  var util = require('util');
  
  util.isError(new Error())
    // true
  util.isError(new TypeError())
    // true
  util.isError({ name: 'Error', message: 'an error occurred' })
    // false
<

    
------------------------------------------------------------------------------
util.isBoolean(object)                             *node-api-util.isBoolean()*

Returns `true` if the given "object" is a `Boolean`. `false` otherwise.

 >
  var util = require('util');
  
  util.isBoolean(1)
    // false
  util.isBoolean(0)
    // false
  util.isBoolean(false)
    // true
<

    
------------------------------------------------------------------------------
util.isNull(object)                                   *node-api-util.isNull()*

Returns `true` if the given "object" is strictly `null`. `false` otherwise.

 >
  var util = require('util');
  
  util.isNull(0)
    // false
  util.isNull(undefined)
    // false
  util.isNull(null)
    // true
<

    
------------------------------------------------------------------------------
util.isNullOrUndefined(object)             *node-api-util.isNullOrUndefined()*

Returns `true` if the given "object" is `null` or `undefined`. `false` otherwise.

 >
  var util = require('util');
  
  util.isNullOrUndefined(0)
    // false
  util.isNullOrUndefined(undefined)
    // true
  util.isNullOrUndefined(null)
    // true
<

    
------------------------------------------------------------------------------
util.isNumber(object)                               *node-api-util.isNumber()*

Returns `true` if the given "object" is a `Number`. `false` otherwise.

 >
  var util = require('util');
  
  util.isNumber(false)
    // false
  util.isNumber(Infinity)
    // true
  util.isNumber(0)
    // true
  util.isNumber(NaN)
    // true
<

    
------------------------------------------------------------------------------
util.isString(object)                               *node-api-util.isString()*

Returns `true` if the given "object" is a `String`. `false` otherwise.

 >
  var util = require('util');
  
  util.isString('')
    // true
  util.isString('foo')
    // true
  util.isString(String('foo'))
    // true
  util.isString(5)
    // false
<

    
------------------------------------------------------------------------------
util.isSymbol(object)                               *node-api-util.isSymbol()*

Returns `true` if the given "object" is a `Symbol`. `false` otherwise.

 >
  var util = require('util');
  
  util.isSymbol(5)
    // false
  util.isSymbol('foo')
    // false
  util.isSymbol(Symbol('foo'))
    // true
<

    
------------------------------------------------------------------------------
util.isUndefined(object)                         *node-api-util.isUndefined()*

Returns `true` if the given "object" is `undefined`. `false` otherwise.

 >
  var util = require('util');
  
  var foo;
  util.isUndefined(5)
    // false
  util.isUndefined(foo)
    // true
  util.isUndefined(null)
    // false
<

    
------------------------------------------------------------------------------
util.isObject(object)                               *node-api-util.isObject()*

Returns `true` if the given "object" is strictly an `Object` **and** not a
`Function`. `false` otherwise.

 >
  var util = require('util');
  
  util.isObject(5)
    // false
  util.isObject(null)
    // false
  util.isObject({})
    // true
  util.isObject(function(){})
    // false
<

    
------------------------------------------------------------------------------
util.isFunction(object)                           *node-api-util.isFunction()*

Returns `true` if the given "object" is a `Function`. `false` otherwise.

 >
  var util = require('util');
  
  function Foo() {}
  var Bar = function() {};
  
  util.isFunction({})
    // false
  util.isFunction(Foo)
    // true
  util.isFunction(Bar)
    // true
<

    
------------------------------------------------------------------------------
util.isPrimitive(object)                         *node-api-util.isPrimitive()*

Returns `true` if the given "object" is a primitive type. `false` otherwise.

 >
  var util = require('util');
  
  util.isPrimitive(5)
    // true
  util.isPrimitive('foo')
    // true
  util.isPrimitive(false)
    // true
  util.isPrimitive(null)
    // true
  util.isPrimitive(undefined)
    // true
  util.isPrimitive({})
    // false
  util.isPrimitive(function() {})
    // false
  util.isPrimitive(/^$/)
    // false
  util.isPrimitive(new Date())
    // false
<

    
------------------------------------------------------------------------------
util.isBuffer(object)                               *node-api-util.isBuffer()*

Returns `true` if the given "object" is a `Buffer`. `false` otherwise.

 >
  var util = require('util');
  
  util.isBuffer({ length: 0 })
    // false
  util.isBuffer([])
    // false
  util.isBuffer(new Buffer('hello world'))
    // true
<

    
------------------------------------------------------------------------------
util.inherits(constructor, superConstructor)        *node-api-util.inherits()*

Inherit the prototype methods from one
*node-api-https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/constructor*
into another.  The prototype of `constructor` will be set to a new
object created from `superConstructor`.

As an additional convenience, `superConstructor` will be accessible
through the `constructor.super_` property.

 >
  var util = require("util");
  var events = require("events");
  
  function MyStream() {
      events.EventEmitter.call(this);
  }
  
  util.inherits(MyStream, events.EventEmitter);
  
  MyStream.prototype.write = function(data) {
      this.emit("data", data);
  }
  
  var stream = new MyStream();
  
  console.log(stream instanceof events.EventEmitter); // true
  console.log(MyStream.super_ === events.EventEmitter); // true
  
  stream.on("data", function(data) {
      console.log('Received data: "' + data + '"');
  })
  stream.write("It works!"); // Received data: "It works!"
<

    
------------------------------------------------------------------------------
util.deprecate(function, string)                   *node-api-util.deprecate()*

Marks that a method should not be used any more.

 >
  var util = require('util');
  
  exports.puts = util.deprecate(function() {
    for (var i = 0, len = arguments.length; i &lt; len; ++i) {
      process.stdout.write(arguments[i] + '\n');
    }
  }, 'util.puts: Use console.log instead');
<

It returns a modified function which warns once by default.

If `--no-deprecation` is set then this function is a NO-OP.  Configurable
at run-time through the `process.noDeprecation` boolean (only effective
when set before a module is loaded.)

If `--trace-deprecation` is set, a warning and a stack trace are logged
to the console the first time the deprecated API is used.  Configurable
at run-time through the `process.traceDeprecation` boolean.

If `--throw-deprecation` is set then the application throws an exception
when the deprecated API is used.  Configurable at run-time through the
`process.throwDeprecation` boolean.

`process.throwDeprecation` takes precedence over `process.traceDeprecation`.

    
------------------------------------------------------------------------------
util.debug(string)                                     *node-api-util.debug()*

Deprecated predecessor of `console.error`.

    
------------------------------------------------------------------------------
util.error([...])                                      *node-api-util.error()*

Deprecated predecessor of `console.error`.

    
------------------------------------------------------------------------------
util.puts([...])                                        *node-api-util.puts()*

Deprecated predecessor of `console.log`.

    
------------------------------------------------------------------------------
util.print([...])                                      *node-api-util.print()*

Deprecated predecessor of `console.log`.

    
------------------------------------------------------------------------------
util.pump(readableStream, writableStream[, callback])   *node-api-util.pump()*

Deprecated predecessor of `stream.pipe()`.

    

==============================================================================
PROPERTIES                                          *node-api-util-properties*

 vim:tw=78:ts=8:ft=help