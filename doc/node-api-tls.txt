*node-api-tls_(ssl).txt*      For Node.js module `TLS (SSL)` version v3.3.0.

Node.js Documentation
https://nodejs.org

==============================================================================
CONTENTS                                         *node-api-tls_(ssl)-contents*

  1. Intro                                                |node-api-tls_(ssl)|
  2. Methods                                      |node-api-tls_(ssl)-methods|
    2.1. tls.getCiphers()                    |node-api-tls_(ssl).getCiphers()|
    2.2. tls.createServer(options[, secureConnectionListener])  |node-api-tls_(ssl).createServer()|
    2.3. tls.connect(options[, callback])       |node-api-tls_(ssl).connect()|
    2.4. tls.connect(port[, host][, options][, callback])  |node-api-tls_(ssl).connect()|
    2.5. new tls.TLSSocket(socket, options)   |node-api-tls_(ssl).TLSSocket()|
    2.6. tls.createSecureContext(details)  |node-api-tls_(ssl).createSecureContext()|
    2.7. tls.createSecurePair([context][, isServer][, requestCert][, rejectUnauthorized])  |node-api-tls_(ssl).createSecurePair()|
  3. Properties                                |node-api-tls_(ssl)-properties|

==============================================================================
INTRO                                                     *node-api-tls_(ssl)*

Stability: 2 - Stable

Use `require('tls')` to access this module.

The `tls` module uses OpenSSL to provide Transport Layer Security and/or
Secure Socket Layer: encrypted stream communication.

TLS/SSL is a public/private key infrastructure. Each client and each
server must have a private key. A private key is created like this:

 >
  openssl genrsa -out ryans-key.pem 2048
<

All servers and some clients need to have a certificate. Certificates are public
keys signed by a Certificate Authority or self-signed. The first step to
getting a certificate is to create a "Certificate Signing Request" (CSR)
file. This is done with:

 >
  openssl req -new -sha256 -key ryans-key.pem -out ryans-csr.pem
<

To create a self-signed certificate with the CSR, do this:

 >
  openssl x509 -req -in ryans-csr.pem -signkey ryans-key.pem -out ryans-cert.pem
<

Alternatively you can send the CSR to a Certificate Authority for signing.

For Perfect Forward Secrecy, it is required to generate Diffie-Hellman
parameters:

 >
  openssl dhparam -outform PEM -out dhparam.pem 2048
<

To create .pfx or .p12, do this:

 >
  openssl pkcs12 -export -in agent5-cert.pem -inkey agent5-key.pem \
      -certfile ca-cert.pem -out agent5.pfx
<

* `in`:  certificate
* `inkey`: private key
* `certfile`: all CA certs concatenated in one file like
  `cat ca1-cert.pem ca2-cert.pem &gt; ca-cert.pem`

==============================================================================
METHODS                                           *node-api-tls_(ssl)-methods*

------------------------------------------------------------------------------
tls.getCiphers()                             *node-api-tls_(ssl).getCiphers()*

Returns an array with the names of the supported SSL ciphers.

Example:

 >
  var ciphers = tls.getCiphers();
  console.log(ciphers); // ['AES128-SHA', 'AES256-SHA', ...]
<

    
------------------------------------------------------------------------------
tls.createServer(options[, secureConnectionListener])  *node-api-tls_(ssl).createServer()*

Creates a new [tls.Server][].  The `connectionListener` argument is
automatically set as a listener for the [secureConnection][] event.  The
`options` object has these possibilities:

* `pfx`: A string or `Buffer` containing the private key, certificate and
  CA certs of the server in PFX or PKCS12 format. (Mutually exclusive with
  the `key`, `cert` and `ca` options.)
  
* `key`: A string or `Buffer` containing the private key of the server in
  PEM format. (Could be an array of keys). (Required)
  
* `passphrase`: A string of passphrase for the private key or pfx.
  
* `cert`: A string or `Buffer` containing the certificate key of the server in
  PEM format. (Could be an array of certs). (Required)
  
* `ca`: An array of strings or `Buffer`s of trusted certificates in PEM
  format. If this is omitted several well known "root" CAs will be used,
  like VeriSign. These are used to authorize connections.
  
* `crl` : Either a string or list of strings of PEM encoded CRLs (Certificate
  Revocation List)
  
* `ciphers`: A string describing the ciphers to use or exclude, separated by
  `:`. The default cipher suite is:
   >
    ECDHE-RSA-AES128-GCM-SHA256:
    ECDHE-ECDSA-AES128-GCM-SHA256:
    ECDHE-RSA-AES256-GCM-SHA384:
    ECDHE-ECDSA-AES256-GCM-SHA384:
    DHE-RSA-AES128-GCM-SHA256:
    ECDHE-RSA-AES128-SHA256:
    DHE-RSA-AES128-SHA256:
    ECDHE-RSA-AES256-SHA384:
    DHE-RSA-AES256-SHA384:
    ECDHE-RSA-AES256-SHA256:
    DHE-RSA-AES256-SHA256:
    HIGH:
    !aNULL:
    !eNULL:
    !EXPORT:
    !DES:
    !RC4:
    !MD5:
    !PSK:
    !SRP:
    !CAMELLIA
  <
  
  The default cipher suite prefers GCM ciphers for [Chrome's 'modern
  cryptography' setting] and also prefers ECDHE and DHE ciphers for Perfect
  Forward secrecy, while offering __some__ backward compatibiltity.
  128 bit AES is preferred over 192 and 256 bit AES in light of [specific
  attacks affecting larger AES key sizes].
  Old clients that rely on insecure and deprecated RC4 or DES-based ciphers
  (like Internet Explorer 6) aren't able to complete the handshake with the default
  configuration. If you absolutely must support these clients, the
  [TLS recommendations] may offer a compatible cipher suite. For more details
  on the format, see the [OpenSSL cipher list format documentation].
  
* `ecdhCurve`: A string describing a named curve to use for ECDH key agreement
  or false to disable ECDH.
  Defaults to `prime256v1` (NIST P-256). Use [crypto.getCurves()][] to obtain
  a list of available curve names. On recent releases,
  `openssl ecparam -list_curves` will also display the name and description of
  each available elliptic curve.
  
* `dhparam`: A string or `Buffer` containing Diffie Hellman parameters,
  required for Perfect Forward Secrecy. Use `openssl dhparam` to create it.
  Its key length should be greater than or equal to 1024 bits, otherwise
  it throws an error. It is strongly recommended to use 2048 bits or
  more for stronger security. If omitted or invalid, it is silently
  discarded and DHE ciphers won't be available.
  
* `handshakeTimeout`: Abort the connection if the SSL/TLS handshake does not
  finish in this many milliseconds. The default is 120 seconds.
  A `'clientError'` is emitted on the `tls.Server` object whenever a handshake
  times out.
  
* `honorCipherOrder` : When choosing a cipher, use the server's preferences
  instead of the client preferences. Default: `true`.
  
* `requestCert`: If `true` the server will request a certificate from
  clients that connect and attempt to verify that certificate. Default:
  `false`.
  
* `rejectUnauthorized`: If `true` the server will reject any connection
  which is not authorized with the list of supplied CAs. This option only
  has an effect if `requestCert` is `true`. Default: `false`.
  
* `NPNProtocols`: An array or `Buffer` of possible NPN protocols. (Protocols
  should be ordered by their priority).
  
* `SNICallback(servername, cb)`: A function that will be called if client
  supports SNI TLS extension. Two argument will be passed to it: `servername`,
  and `cb`. `SNICallback` should invoke `cb(null, ctx)`, where `ctx` is a
  SecureContext instance.
  (You can use `tls.createSecureContext(...)` to get proper
  SecureContext). If `SNICallback` wasn't provided - default callback with
  high-level API will be used (see below).
  
* `sessionTimeout`: An integer specifying the seconds after which TLS
  session identifiers and TLS session tickets created by the server are
  timed out. See [SSL_CTX_set_timeout] for more details.
  
* `ticketKeys`: A 48-byte `Buffer` instance consisting of 16-byte prefix,
  16-byte hmac key, 16-byte AES key. You could use it to accept tls session
  tickets on multiple instances of tls server.
  NOTE: Automatically shared between `cluster` module workers.
  
* `sessionIdContext`: A string containing an opaque identifier for session
  resumption. If `requestCert` is `true`, the default is MD5 hash value
  generated from command-line. Otherwise, the default is not provided.
  
* `secureProtocol`: The SSL method to use, e.g. `SSLv3_method` to force
  SSL version 3. The possible values depend on your installation of
  OpenSSL and are defined in the constant [SSL_METHODS][].
  

Here is a simple example echo server:

 >
  var tls = require('tls');
  var fs = require('fs');
  
  var options = {
    key: fs.readFileSync('server-key.pem'),
    cert: fs.readFileSync('server-cert.pem'),
  
    // This is necessary only if using the client certificate authentication.
    requestCert: true,
  
    // This is necessary only if the client uses the self-signed certificate.
    ca: [ fs.readFileSync('client-cert.pem') ]
  };
  
  var server = tls.createServer(options, function(socket) {
    console.log('server connected',
                socket.authorized ? 'authorized' : 'unauthorized');
    socket.write("welcome!\n");
    socket.setEncoding('utf8');
    socket.pipe(socket);
  });
  server.listen(8000, function() {
    console.log('server bound');
  });
<

Or

 >
  var tls = require('tls');
  var fs = require('fs');
  
  var options = {
    pfx: fs.readFileSync('server.pfx'),
  
    // This is necessary only if using the client certificate authentication.
    requestCert: true,
  
  };
  
  var server = tls.createServer(options, function(socket) {
    console.log('server connected',
                socket.authorized ? 'authorized' : 'unauthorized');
    socket.write("welcome!\n");
    socket.setEncoding('utf8');
    socket.pipe(socket);
  });
  server.listen(8000, function() {
    console.log('server bound');
  });
<

You can test this server by connecting to it with `openssl s_client`:

 >
  openssl s_client -connect 127.0.0.1:8000
<

    
------------------------------------------------------------------------------
tls.connect(options[, callback])                *node-api-tls_(ssl).connect()*

Creates a new client connection to the given `port` and `host` (old API) or
`options.port` and `options.host`. (If `host` is omitted, it defaults to
`localhost`.) `options` should be an object which specifies:

* `host`: Host the client should connect to
  
* `port`: Port the client should connect to
  
* `socket`: Establish secure connection on a given socket rather than
  creating a new socket. If this option is specified, `host` and `port`
  are ignored.
  
* `path`: Creates unix socket connection to path. If this option is
  specified, `host` and `port` are ignored.
  
* `pfx`: A string or `Buffer` containing the private key, certificate and
  CA certs of the client in PFX or PKCS12 format.
  
* `key`: A string or `Buffer` containing the private key of the client in
  PEM format. (Could be an array of keys).
  
* `passphrase`: A string of passphrase for the private key or pfx.
  
* `cert`: A string or `Buffer` containing the certificate key of the client in
  PEM format. (Could be an array of certs).
  
* `ca`: An array of strings or `Buffer`s of trusted certificates in PEM
  format. If this is omitted several well known "root" CAs will be used,
  like VeriSign. These are used to authorize connections.
  
* `ciphers`: A string describing the ciphers to use or exclude, separated by
  `:`. Uses the same default cipher suite as `tls.createServer`.
  
* `rejectUnauthorized`: If `true`, the server certificate is verified against
  the list of supplied CAs. An `'error'` event is emitted if verification
  fails; `err.code` contains the OpenSSL error code. Default: `true`.
  
* `NPNProtocols`: An array of strings or `Buffer`s containing supported NPN
  protocols. `Buffer`s should have following format: `0x05hello0x05world`,
  where first byte is next protocol name's length. (Passing array should
  usually be much simpler: `['hello', 'world']`.)
  
* `servername`: Servername for SNI (Server Name Indication) TLS extension.
  
* `checkServerIdentity(servername, cert)`: Provide an override for checking
  server's hostname against the certificate. Should return an error if verification
  fails. Return `undefined` if passing.
  
* `secureProtocol`: The SSL method to use, e.g. `SSLv3_method` to force
  SSL version 3. The possible values depend on your installation of
  OpenSSL and are defined in the constant [SSL_METHODS][].
  
* `session`: A `Buffer` instance, containing TLS session.
  

The `callback` parameter will be added as a listener for the
['secureConnect'][] event.

`tls.connect()` returns a [tls.TLSSocket][] object.

Here is an example of a client of echo server as described previously:

 >
  var tls = require('tls');
  var fs = require('fs');
  
  var options = {
    // These are necessary only if using the client certificate authentication
    key: fs.readFileSync('client-key.pem'),
    cert: fs.readFileSync('client-cert.pem'),
  
    // This is necessary only if the server uses the self-signed certificate
    ca: [ fs.readFileSync('server-cert.pem') ]
  };
  
  var socket = tls.connect(8000, options, function() {
    console.log('client connected',
                socket.authorized ? 'authorized' : 'unauthorized');
    process.stdin.pipe(socket);
    process.stdin.resume();
  });
  socket.setEncoding('utf8');
  socket.on('data', function(data) {
    console.log(data);
  });
  socket.on('end', function() {
    server.close();
  });
<

Or

 >
  var tls = require('tls');
  var fs = require('fs');
  
  var options = {
    pfx: fs.readFileSync('client.pfx')
  };
  
  var socket = tls.connect(8000, options, function() {
    console.log('client connected',
                socket.authorized ? 'authorized' : 'unauthorized');
    process.stdin.pipe(socket);
    process.stdin.resume();
  });
  socket.setEncoding('utf8');
  socket.on('data', function(data) {
    console.log(data);
  });
  socket.on('end', function() {
    server.close();
  });
<

    
------------------------------------------------------------------------------
tls.connect(port[, host][, options][, callback])  *node-api-tls_(ssl).connect()*

Creates a new client connection to the given `port` and `host` (old API) or
`options.port` and `options.host`. (If `host` is omitted, it defaults to
`localhost`.) `options` should be an object which specifies:

* `host`: Host the client should connect to
  
* `port`: Port the client should connect to
  
* `socket`: Establish secure connection on a given socket rather than
  creating a new socket. If this option is specified, `host` and `port`
  are ignored.
  
* `path`: Creates unix socket connection to path. If this option is
  specified, `host` and `port` are ignored.
  
* `pfx`: A string or `Buffer` containing the private key, certificate and
  CA certs of the client in PFX or PKCS12 format.
  
* `key`: A string or `Buffer` containing the private key of the client in
  PEM format. (Could be an array of keys).
  
* `passphrase`: A string of passphrase for the private key or pfx.
  
* `cert`: A string or `Buffer` containing the certificate key of the client in
  PEM format. (Could be an array of certs).
  
* `ca`: An array of strings or `Buffer`s of trusted certificates in PEM
  format. If this is omitted several well known "root" CAs will be used,
  like VeriSign. These are used to authorize connections.
  
* `ciphers`: A string describing the ciphers to use or exclude, separated by
  `:`. Uses the same default cipher suite as `tls.createServer`.
  
* `rejectUnauthorized`: If `true`, the server certificate is verified against
  the list of supplied CAs. An `'error'` event is emitted if verification
  fails; `err.code` contains the OpenSSL error code. Default: `true`.
  
* `NPNProtocols`: An array of strings or `Buffer`s containing supported NPN
  protocols. `Buffer`s should have following format: `0x05hello0x05world`,
  where first byte is next protocol name's length. (Passing array should
  usually be much simpler: `['hello', 'world']`.)
  
* `servername`: Servername for SNI (Server Name Indication) TLS extension.
  
* `checkServerIdentity(servername, cert)`: Provide an override for checking
  server's hostname against the certificate. Should return an error if verification
  fails. Return `undefined` if passing.
  
* `secureProtocol`: The SSL method to use, e.g. `SSLv3_method` to force
  SSL version 3. The possible values depend on your installation of
  OpenSSL and are defined in the constant [SSL_METHODS][].
  
* `session`: A `Buffer` instance, containing TLS session.
  

The `callback` parameter will be added as a listener for the
['secureConnect'][] event.

`tls.connect()` returns a [tls.TLSSocket][] object.

Here is an example of a client of echo server as described previously:

 >
  var tls = require('tls');
  var fs = require('fs');
  
  var options = {
    // These are necessary only if using the client certificate authentication
    key: fs.readFileSync('client-key.pem'),
    cert: fs.readFileSync('client-cert.pem'),
  
    // This is necessary only if the server uses the self-signed certificate
    ca: [ fs.readFileSync('server-cert.pem') ]
  };
  
  var socket = tls.connect(8000, options, function() {
    console.log('client connected',
                socket.authorized ? 'authorized' : 'unauthorized');
    process.stdin.pipe(socket);
    process.stdin.resume();
  });
  socket.setEncoding('utf8');
  socket.on('data', function(data) {
    console.log(data);
  });
  socket.on('end', function() {
    server.close();
  });
<

Or

 >
  var tls = require('tls');
  var fs = require('fs');
  
  var options = {
    pfx: fs.readFileSync('client.pfx')
  };
  
  var socket = tls.connect(8000, options, function() {
    console.log('client connected',
                socket.authorized ? 'authorized' : 'unauthorized');
    process.stdin.pipe(socket);
    process.stdin.resume();
  });
  socket.setEncoding('utf8');
  socket.on('data', function(data) {
    console.log(data);
  });
  socket.on('end', function() {
    server.close();
  });
<

    
------------------------------------------------------------------------------
new tls.TLSSocket(socket, options)            *node-api-tls_(ssl).TLSSocket()*

Construct a new TLSSocket object from existing TCP socket.

`socket` is an instance of [net.Socket][]

`options` is an object that might contain following properties:

* `secureContext`: An optional TLS context object from
   `tls.createSecureContext( ... )`
  
* `isServer`: If true - TLS socket will be instantiated in server-mode
  
* `server`: An optional [net.Server][] instance
  
* `requestCert`: Optional, see [tls.createSecurePair][]
  
* `rejectUnauthorized`: Optional, see [tls.createSecurePair][]
  
* `NPNProtocols`: Optional, see [tls.createServer][]
  
* `SNICallback`: Optional, see [tls.createServer][]
  
* `session`: Optional, a `Buffer` instance, containing TLS session
  
* `requestOCSP`: Optional, if `true` - OCSP status request extension would
  be added to client hello, and `OCSPResponse` event will be emitted on socket
  before establishing secure communication
  

    
------------------------------------------------------------------------------
tls.createSecureContext(details)    *node-api-tls_(ssl).createSecureContext()*

Creates a credentials object, with the optional details being a
dictionary with keys:

* `pfx` : A string or buffer holding the PFX or PKCS12 encoded private
  key, certificate and CA certificates
* `key` : A string holding the PEM encoded private key
* `passphrase` : A string of passphrase for the private key or pfx
* `cert` : A string holding the PEM encoded certificate
* `ca` : Either a string or list of strings of PEM encoded CA
  certificates to trust.
* `crl` : Either a string or list of strings of PEM encoded CRLs
  (Certificate Revocation List)
* `ciphers`: A string describing the ciphers to use or exclude.
  Consult
  http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT
  for details on the format.
* `honorCipherOrder` : When choosing a cipher, use the server's preferences
  instead of the client preferences. For further details see `tls` module
  documentation.

If no 'ca' details are given, then io.js will use the default
publicly trusted list of CAs as given in

http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt.

    
------------------------------------------------------------------------------
tls.createSecurePair([context][, isServer][, requestCert][, rejectUnauthorized])  *node-api-tls_(ssl).createSecurePair()*

Creates a new secure pair object with two streams, one of which reads/writes
encrypted data, and one reads/writes cleartext data.
Generally the encrypted one is piped to/from an incoming encrypted data stream,
and the cleartext one is used as a replacement for the initial encrypted stream.

* `credentials`: A secure context object from tls.createSecureContext( ... )
  
* `isServer`: A boolean indicating whether this tls connection should be
  opened as a server or a client.
  
* `requestCert`: A boolean indicating whether a server should request a
  certificate from a connecting client. Only applies to server connections.
  
* `rejectUnauthorized`: A boolean indicating whether a server should
  automatically reject clients with invalid certificates. Only applies to
  servers with `requestCert` enabled.
  

`tls.createSecurePair()` returns a SecurePair object with `cleartext` and
`encrypted` stream properties.

NOTE: `cleartext` has the same APIs as [tls.TLSSocket][]

    

==============================================================================
PROPERTIES                                     *node-api-tls_(ssl)-properties*

 vim:tw=78:ts=8:ft=help