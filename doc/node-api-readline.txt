*node-api-readline.txt*      For Node.js module `Readline` version v3.3.0.

Node.js Documentation
https://nodejs.org

==============================================================================
CONTENTS                                          *node-api-readline-contents*

  1. Intro                                                 |node-api-readline|
  2. Methods                                       |node-api-readline-methods|
    2.1. readline.createInterface(options)  |node-api-readline.createInterface()|
    2.2. readline.cursorTo(stream, x, y)        |node-api-readline.cursorTo()|
    2.3. readline.moveCursor(stream, dx, dy)  |node-api-readline.moveCursor()|
    2.4. readline.clearLine(stream, dir)       |node-api-readline.clearLine()|
    2.5. readline.clearScreenDown(stream)  |node-api-readline.clearScreenDown()|
  3. Properties                                 |node-api-readline-properties|

==============================================================================
INTRO                                                      *node-api-readline*

Stability: 2 - Stable

To use this module, do `require('readline')`. Readline allows reading of a
stream (such as `process.stdin`) on a line-by-line basis.

Note that once you've invoked this module, your io.js program will not
terminate until you've closed the interface. Here's how to allow your
program to gracefully exit:

 >
  var readline = require('readline');
  
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  rl.question("What do you think of io.js? ", function(answer) {
    // TODO: Log the answer in a database
    console.log("Thank you for your valuable feedback:", answer);
  
    rl.close();
  });
<

==============================================================================
METHODS                                            *node-api-readline-methods*

------------------------------------------------------------------------------
readline.createInterface(options)        *node-api-readline.createInterface()*

Creates a readline `Interface` instance. Accepts an "options" Object that takes
the following values:

* `input` - the readable stream to listen to (Required).
  
* `output` - the writable stream to write readline data to (Optional).
  
* `completer` - an optional function that is used for Tab autocompletion. See
  below for an example of using this.
  
* `terminal` - pass `true` if the `input` and `output` streams should be
  treated like a TTY, and have ANSI/VT100 escape codes written to it.
  Defaults to checking `isTTY` on the `output` stream upon instantiation.
  
* `historySize` - maximum number of history lines retained. Defaults to `30`.
  

The `completer` function is given the current line entered by the user, and
is supposed to return an Array with 2 entries:

<ol>
* An Array with matching entries for the completion.
  
* The substring that was used for the matching.
  
</ol>
Which ends up looking something like:
`[[substr1, substr2, ...], originalsubstring]`.

Example:

 >
  function completer(line) {
    var completions = '.help .error .exit .quit .q'.split(' ')
    var hits = completions.filter(function(c) { return c.indexOf(line) == 0 })
    // show all completions if none found
    return [hits.length ? hits : completions, line]
  }
<

Also `completer` can be run in async mode if it accepts two arguments:

 >
  function completer(linePartial, callback) {
    callback(null, [['123'], linePartial]);
  }
<

`createInterface` is commonly used with `process.stdin` and
`process.stdout` in order to accept user input:

 >
  var readline = require('readline');
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
<

Once you have a readline instance, you most commonly listen for the
`"line"` event.

If `terminal` is `true` for this instance then the `output` stream will get
the best compatibility if it defines an `output.columns` property, and fires
a `"resize"` event on the `output` if/when the columns ever change
(`process.stdout` does this automatically when it is a TTY).

    
------------------------------------------------------------------------------
readline.cursorTo(stream, x, y)                 *node-api-readline.cursorTo()*

Move cursor to the specified position in a given TTY stream.

    
------------------------------------------------------------------------------
readline.moveCursor(stream, dx, dy)           *node-api-readline.moveCursor()*

Move cursor relative to it's current position in a given TTY stream.

    
------------------------------------------------------------------------------
readline.clearLine(stream, dir)                *node-api-readline.clearLine()*

Clears current line of given TTY stream in a specified direction.
`dir` should have one of following values:

* `-1` - to the left from cursor
* `1` - to the right from cursor
* `0` - the entire line

    
------------------------------------------------------------------------------
readline.clearScreenDown(stream)         *node-api-readline.clearScreenDown()*

Clears the screen from the current position of the cursor down.

    

==============================================================================
PROPERTIES                                      *node-api-readline-properties*

 vim:tw=78:ts=8:ft=help