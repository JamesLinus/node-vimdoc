*node-api-repl.txt*      For Node.js module `REPL` version v3.3.0.

Node.js Documentation
https://nodejs.org

==============================================================================
CONTENTS                                              *node-api-repl-contents*

  1. Intro                                                     |node-api-repl|
  2. Methods                                           |node-api-repl-methods|
    2.1. repl.start(options)                           |node-api-repl.start()|
  3. Properties                                     |node-api-repl-properties|

==============================================================================
INTRO                                                          *node-api-repl*

Stability: 2 - Stable

A Read-Eval-Print-Loop (REPL) is available both as a standalone program and
easily includable in other programs. The REPL provides a way to interactively
run JavaScript and see the results.  It can be used for debugging, testing, or
just trying things out.

By executing `iojs` without any arguments from the command-line you will be
dropped into the REPL. It has simplistic emacs line-editing.

 >
  mjr:~$ iojs
  Type '.help' for options.
  &gt; a = [ 1, 2, 3];
  [ 1, 2, 3 ]
  &gt; a.forEach(function (v) {
  ...   console.log(v);
  ...   });
  1
  2
  3
<

For advanced line-editors, start io.js with the environmental variable
`NODE_NO_READLINE=1`. This will start the main and debugger REPL in canonical
terminal settings which will allow you to use with `rlwrap`.

For example, you could add this to your bashrc file:

 >
  alias iojs="env NODE_NO_READLINE=1 rlwrap iojs"
<

==============================================================================
METHODS                                                *node-api-repl-methods*

------------------------------------------------------------------------------
repl.start(options)                                    *node-api-repl.start()*

Returns and starts a `REPLServer` instance, that inherits from
[Readline Interface][]. Accepts an "options" Object that takes
the following values:

* `prompt` - the prompt and `stream` for all I/O. Defaults to `&gt; `.
  
  
  * `input` - the readable stream to listen to. Defaults to `process.stdin`.
    
    * `output` - the writable stream to write readline data to. Defaults to
      `process.stdout`.
      
    * `terminal` - pass `true` if the `stream` should be treated like a TTY, and
      have ANSI/VT100 escape codes written to it. Defaults to checking `isTTY`
      on the `output` stream upon instantiation.
      
    * `eval` - function that will be used to eval each given line. Defaults to
      an async wrapper for `eval()`. See below for an example of a custom `eval`.
      
    * `useColors` - a boolean which specifies whether or not the `writer` function
      should output colors. If a different `writer` function is set then this does
      nothing. Defaults to the repl's `terminal` value.
      
    * `useGlobal` - if set to `true`, then the repl will use the `global` object,
      instead of running scripts in a separate context. Defaults to `false`.
      
    * `ignoreUndefined` - if set to `true`, then the repl will not output the
      return value of command if it's `undefined`. Defaults to `false`.
      
    * `writer` - the function to invoke for each command that gets evaluated which
      returns the formatting (including coloring) to display. Defaults to
      `util.inspect`.
      
    * `replMode` - controls whether the repl runs all commands in strict mode,
      default mode, or a hybrid mode ("magic" mode.) Acceptable values are:
      
      * `repl.REPL_MODE_SLOPPY` - run commands in sloppy mode.
    * `repl.REPL_MODE_STRICT` - run commands in strict mode. This is equivalent to
      prefacing every repl statement with `'use strict'`.
    * `repl.REPL_MODE_MAGIC` - attempt to run commands in default mode. If they
    fail to parse, re-try in strict mode.

You can use your own `eval` function if it has following signature:

 >
  function eval(cmd, context, filename, callback) {
    callback(null, result);
  }
<

On tab completion - `eval` will be called with `.scope` as an input string. It
is expected to return an array of scope names to be used for the auto-completion.

Multiple REPLs may be started against the same running instance of io.js.  Each
will share the same global object but will have unique I/O.

Here is an example that starts a REPL on stdin, a Unix socket, and a TCP socket:

 >
  var net = require('net'),
      repl = require('repl'),
      connections = 0;
  
  repl.start({
    prompt: "io.js via stdin&gt; ",
    input: process.stdin,
    output: process.stdout
  });
  
  net.createServer(function (socket) {
    connections += 1;
    repl.start({
      prompt: "io.js via Unix socket&gt; ",
      input: socket,
      output: socket
    }).on('exit', function() {
      socket.end();
    })
  }).listen("/tmp/iojs-repl-sock");
  
  net.createServer(function (socket) {
    connections += 1;
    repl.start({
      prompt: "io.js via TCP socket&gt; ",
      input: socket,
      output: socket
    }).on('exit', function() {
      socket.end();
    });
  }).listen(5001);
<

Running this program from the command line will start a REPL on stdin.  Other
REPL clients may connect through the Unix socket or TCP socket. `telnet` is useful
for connecting to TCP sockets, and `socat` can be used to connect to both Unix and
TCP sockets.

By starting a REPL from a Unix socket-based server instead of stdin, you can
connect to a long-running io.js process without restarting it.

For an example of running a "full-featured" (`terminal`) REPL over
a `net.Server` and `net.Socket` instance, see: https://gist.github.com/2209310

For an example of running a REPL instance over `curl(1)`,
see: https://gist.github.com/2053342

    

==============================================================================
PROPERTIES                                          *node-api-repl-properties*

 vim:tw=78:ts=8:ft=help